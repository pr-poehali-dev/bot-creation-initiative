'''
Business: Telegram –±–æ—Ç –¥–ª—è –ê–ª—å—Ñ–∞-—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
Args: event - dict —Å httpMethod, body, headers
      context - –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ request_id, function_name
Returns: HTTP response dict –¥–ª—è webhook
'''

import json
import os
from typing import Dict, Any, Optional
import psycopg2
from psycopg2.extras import RealDictCursor
import random
import string

TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '')
DATABASE_URL = os.environ.get('DATABASE_URL', '')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

def generate_referral_code() -> str:
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

def is_admin(telegram_id: int) -> bool:
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT is_admin FROM users WHERE telegram_id = %s", (telegram_id,))
    user = cur.fetchone()
    cur.close()
    conn.close()
    return user and user.get('is_admin', False)

def activate_card_for_user(telegram_id: int, admin_id: int) -> bool:
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute("SELECT * FROM users WHERE telegram_id = %s", (telegram_id,))
    user = cur.fetchone()
    
    if not user or user['card_activated']:
        cur.close()
        conn.close()
        return False
    
    cur.execute(
        "UPDATE users SET card_activated = TRUE, balance = balance + 500, total_earned = total_earned + 500 WHERE telegram_id = %s",
        (telegram_id,)
    )
    
    if user['referrer_id']:
        cur.execute(
            "UPDATE users SET balance = balance + 200, total_earned = total_earned + 200 WHERE telegram_id = %s",
            (user['referrer_id'],)
        )
        
        try:
            send_message(
                user['referrer_id'],
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–∞—Ä—Ç—É!\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>200 ‚ÇΩ</b>",
            )
        except:
            pass
    
    cur.execute(
        "INSERT INTO admin_logs (admin_id, action, target_user_id, details) VALUES (%s, %s, %s, %s)",
        (admin_id, 'card_activation', telegram_id, '–ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –Ω–∞—á–∏—Å–ª–µ–Ω–æ 500‚ÇΩ')
    )
    
    conn.commit()
    cur.close()
    conn.close()
    
    try:
        send_message(
            telegram_id,
            "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>500 ‚ÇΩ</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤'",
        )
    except:
        pass
    
    return True

def get_or_create_user(telegram_id: int, username: str, first_name: str, referrer_code: Optional[str] = None) -> Dict:
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute("SELECT * FROM users WHERE telegram_id = %s", (telegram_id,))
    user = cur.fetchone()
    
    if not user:
        referral_code = generate_referral_code()
        referrer_id = None
        
        if referrer_code:
            cur.execute("SELECT telegram_id FROM users WHERE referral_code = %s", (referrer_code,))
            referrer = cur.fetchone()
            if referrer:
                referrer_id = referrer['telegram_id']
                cur.execute(
                    "UPDATE users SET referrals_count = referrals_count + 1 WHERE telegram_id = %s",
                    (referrer_id,)
                )
        
        cur.execute(
            """INSERT INTO users (telegram_id, username, first_name, referrer_id, referral_code)
               VALUES (%s, %s, %s, %s, %s) RETURNING *""",
            (telegram_id, username, first_name, referrer_id, referral_code)
        )
        user = cur.fetchone()
        conn.commit()
    
    cur.close()
    conn.close()
    return dict(user)

def get_keyboard(keyboard_type: str = 'main', is_admin_user: bool = False) -> Dict:
    if keyboard_type == 'main':
        buttons = [
            [{'text': 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É', 'url': 'https://alfa.me/ASQWHN'}],
            [{'text': 'ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', 'callback_data': 'referral'}],
            [{'text': 'üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤', 'callback_data': 'withdrawal'}],
            [{'text': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'callback_data': 'info'}],
            [{'text': 'üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'callback_data': 'profile'}],
        ]
        if is_admin_user:
            buttons.append([{'text': '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'callback_data': 'admin_panel'}])
        return {'inline_keyboard': buttons}
    elif keyboard_type == 'back':
        return {
            'inline_keyboard': [
                [{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data': 'menu'}]
            ]
        }
    elif keyboard_type == 'withdrawal':
        return {
            'inline_keyboard': [
                [{'text': 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', 'callback_data': 'withdraw_card'}],
                [{'text': '‚ö° –°–ë–ü', 'callback_data': 'withdraw_sbp'}],
                [{'text': 'üí∞ –ÆMoney', 'callback_data': 'withdraw_yoomoney'}],
                [{'text': 'ü•ù QIWI', 'callback_data': 'withdraw_qiwi'}],
                [{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data': 'menu'}]
            ]
        }
    elif keyboard_type == 'admin':
        return {
            'inline_keyboard': [
                [{'text': '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É', 'callback_data': 'admin_activate'}],
                [{'text': 'üí∞ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', 'callback_data': 'admin_withdrawals'}],
                [{'text': 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'callback_data': 'admin_users'}],
                [{'text': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': 'admin_stats'}],
                [{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data': 'menu'}]
            ]
        }

def send_message(chat_id: int, text: str, reply_markup: Optional[Dict] = None, parse_mode: str = 'HTML'):
    import urllib.request
    
    url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage'
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': parse_mode
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    req = urllib.request.Request(
        url,
        data=json.dumps(data).encode('utf-8'),
        headers={'Content-Type': 'application/json'}
    )
    urllib.request.urlopen(req)

def answer_callback_query(callback_query_id: str, text: Optional[str] = None):
    import urllib.request
    
    url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery'
    data = {'callback_query_id': callback_query_id}
    if text:
        data['text'] = text
    
    req = urllib.request.Request(
        url,
        data=json.dumps(data).encode('utf-8'),
        headers={'Content-Type': 'application/json'}
    )
    urllib.request.urlopen(req)

def handle_start_command(chat_id: int, telegram_id: int, username: str, first_name: str, referrer_code: Optional[str]):
    user = get_or_create_user(telegram_id, username or '', first_name or '', referrer_code)
    is_admin_user = user.get('is_admin', False)
    
    welcome_text = f"""
üåü <b>–ü—Ä–∏–≤–µ—Ç, {first_name}!</b>

–ü–æ–ª—É—á–∏ <b>1000 ‚ÇΩ</b> –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

<b>500 ‚ÇΩ</b> –æ—Ç –Ω–∞—Å + <b>500 ‚ÇΩ</b> –æ—Ç –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞

<b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?</b>

1Ô∏è‚É£ –û—Ñ–æ—Ä–º–∏—Ç—å –ê–ª—å—Ñ–∞-–ö–∞—Ä—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ
2Ô∏è‚É£ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
3Ô∏è‚É£ –°–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫—É –æ—Ç 200 ‚ÇΩ
4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫: @Alfa_Bank778

<b>–ë–æ–Ω—É—Å:</b> –ü–æ–ª—É—á–∞–π—Ç–µ <b>200 ‚ÇΩ</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!
"""
    
    send_message(chat_id, welcome_text, get_keyboard('main', is_admin_user))

def handle_referral_menu(chat_id: int, telegram_id: int):
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute("SELECT * FROM users WHERE telegram_id = %s", (telegram_id,))
    user = cur.fetchone()
    
    cur.close()
    conn.close()
    
    if user:
        bot_username = 'Zzaszxcvbot'
        referral_link = f"https://t.me/{bot_username}?start={user['referral_code']}"
        
        text = f"""
ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals_count']}
‚Ä¢ –ë–∞–ª–∞–Ω—Å: {user['balance']} ‚ÇΩ
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user['total_earned']} ‚ÇΩ

üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>{referral_link}</code>

üí∞ <b>–ü–æ–ª—É—á–∞–π—Ç–µ 200 ‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞!</b>

–ö–æ–≥–¥–∞ –≤–∞—à –¥—Ä—É–≥ –æ—Ñ–æ—Ä–º–∏—Ç –∫–∞—Ä—Ç—É –∏ —Å–æ–≤–µ—Ä—à–∏—Ç –ø–æ–∫—É–ø–∫—É –æ—Ç 200 ‚ÇΩ, –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è 200 ‚ÇΩ!
"""
        
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π', 'switch_inline_query': referral_link}],
                [{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data': 'menu'}]
            ]
        }
        
        send_message(chat_id, text, keyboard)

def handle_withdrawal_menu(chat_id: int, telegram_id: int):
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute("SELECT balance FROM users WHERE telegram_id = %s", (telegram_id,))
    user = cur.fetchone()
    
    cur.close()
    conn.close()
    
    balance = user['balance'] if user else 0
    
    text = f"""
üí∞ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>

üíµ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{balance} ‚ÇΩ</b>

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 500 ‚ÇΩ

–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @Alfa_Bank778
"""
    
    send_message(chat_id, text, get_keyboard('back'))

def handle_info_menu(chat_id: int):
    text = """
‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ</b>

<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å 1000 ‚ÇΩ:</b>
1. –û—Ñ–æ—Ä–º–∏—Ç–µ –ê–ª—å—Ñ–∞-–ö–∞—Ä—Ç—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
2. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–∞—Ä—Ç—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
3. –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –æ—Ç 200 ‚ÇΩ
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ @Alfa_Bank778

<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>
‚Ä¢ <b>200 ‚ÇΩ</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

<b>–£—Å–ª–æ–≤–∏—è –≤—ã–≤–æ–¥–∞:</b>
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 500 ‚ÇΩ
‚Ä¢ –°—Ä–æ–∫–∏: 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @Alfa_Bank778
"""
    
    send_message(chat_id, text, get_keyboard('back'))

def handle_profile_menu(chat_id: int, telegram_id: int):
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute("SELECT * FROM users WHERE telegram_id = %s", (telegram_id,))
    user = cur.fetchone()
    
    cur.close()
    conn.close()
    
    if user:
        card_status = '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' if user['card_activated'] else '‚ùå –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'
        
        text = f"""
üìä <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üë§ –ò–º—è: {user['first_name']}
üÜî ID: {user['telegram_id']}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at'].strftime('%d.%m.%Y')}

üí≥ –ö–∞—Ä—Ç–∞: {card_status}
üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user['balance']} ‚ÇΩ</b>
üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user['total_earned']} ‚ÇΩ
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals_count']}

üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>{user['referral_code']}</code>
"""
        
        send_message(chat_id, text, get_keyboard('back'))

def handle_admin_panel(chat_id: int, telegram_id: int):
    if not is_admin(telegram_id):
        send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute("SELECT COUNT(*) as total FROM users")
    total_users = cur.fetchone()['total']
    
    cur.execute("SELECT COUNT(*) as active FROM users WHERE card_activated = TRUE")
    active_users = cur.fetchone()['active']
    
    cur.execute("SELECT SUM(total_earned) as total_paid FROM users")
    total_paid = cur.fetchone()['total_paid'] or 0
    
    cur.close()
    conn.close()
    
    text = f"""
‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–∞—Ä—Ç—ã: {active_users}
‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ: {total_paid} ‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    send_message(chat_id, text, get_keyboard('admin'))

def handle_admin_stats(chat_id: int, telegram_id: int):
    if not is_admin(telegram_id):
        return
    
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute("SELECT COUNT(*) as total FROM users")
    total_users = cur.fetchone()['total']
    
    cur.execute("SELECT COUNT(*) as active FROM users WHERE card_activated = TRUE")
    active_users = cur.fetchone()['active']
    
    cur.execute("SELECT SUM(balance) as total_balance FROM users")
    total_balance = cur.fetchone()['total_balance'] or 0
    
    cur.execute("SELECT SUM(total_earned) as total_paid FROM users")
    total_paid = cur.fetchone()['total_paid'] or 0
    
    cur.execute("SELECT COUNT(*) as pending FROM card_activations WHERE status = 'pending'")
    pending_activations = cur.fetchone()['pending']
    
    cur.close()
    conn.close()
    
    text = f"""
üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–∞—Ä—Ç—ã: {active_users}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {total_users - active_users}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_balance} ‚ÇΩ
‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ: {total_paid} ‚ÇΩ

üìã <b>–ó–∞—è–≤–∫–∏:</b>
‚Ä¢ –ù–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é: {pending_activations}
"""
    
    keyboard = {
        'inline_keyboard': [
            [{'text': '‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É', 'callback_data': 'admin_panel'}]
        ]
    }
    
    send_message(chat_id, text, keyboard)

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
            },
            'body': ''
        }
    
    if method != 'POST':
        return {'statusCode': 405, 'body': json.dumps({'error': 'Method not allowed'})}
    
    body = json.loads(event.get('body', '{}'))
    
    if 'message' in body:
        message = body['message']
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        username = message['from'].get('username', '')
        first_name = message['from'].get('first_name', '')
        text = message.get('text', '')
        
        if text.startswith('/start'):
            referrer_code = None
            if ' ' in text:
                referrer_code = text.split(' ')[1]
            handle_start_command(chat_id, telegram_id, username, first_name, referrer_code)
        elif text.startswith('/activate') and is_admin(telegram_id):
            parts = text.split()
            if len(parts) == 2:
                target_id = int(parts[1])
                if activate_card_for_user(target_id, telegram_id):
                    send_message(chat_id, f"‚úÖ –ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
                else:
                    send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è {target_id}")
    
    elif 'callback_query' in body:
        callback = body['callback_query']
        chat_id = callback['message']['chat']['id']
        telegram_id = callback['from']['id']
        callback_data = callback['data']
        
        answer_callback_query(callback['id'])
        
        if callback_data == 'menu':
            handle_start_command(
                chat_id,
                telegram_id,
                callback['from'].get('username', ''),
                callback['from'].get('first_name', ''),
                None
            )
        elif callback_data == 'referral':
            handle_referral_menu(chat_id, telegram_id)
        elif callback_data == 'withdrawal':
            handle_withdrawal_menu(chat_id, telegram_id)
        elif callback_data == 'info':
            handle_info_menu(chat_id)
        elif callback_data == 'profile':
            handle_profile_menu(chat_id, telegram_id)
        elif callback_data == 'admin_panel':
            handle_admin_panel(chat_id, telegram_id)
        elif callback_data == 'admin_stats':
            handle_admin_stats(chat_id, telegram_id)
        elif callback_data.startswith('withdraw_'):
            method = callback_data.replace('withdraw_', '')
            text = f"–î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ {method.upper()} —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @Alfa_Bank778"
            send_message(chat_id, text, get_keyboard('back'))
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'application/json'},
        'body': json.dumps({'ok': True})
    }
